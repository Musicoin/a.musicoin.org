<audio autoplay id="player"></audio>
<style>
    .player {
        background-color: #333;
        height: 64px;
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        overflow: hidden;
    }

    .player-foreground {
        display: flex;
        align-items: center;
        justify-content: space-around;
        flex-direction: row;
        position: absolute;
        background: black;
        top: 0;
        left: 0;
        bottom: 5px;
        right: 0;
        z-index: 2;
        min-width: 300px;
        width: 100%;
        height: 100%;
        padding-left: 10px;
        padding-right: 10px;
    }

    .player-bookend {
        height: 100%;
        width: 250px;
    }

    .song-badge {
        display: flex;
        align-items: center;
        max-width: 400px;
        min-width: 33%;
    }

    .player-segment {
        overflow: hidden;
        white-space: nowrap;
        flex-basis: 40%;
        margin-right: 10px;
    }

    .player-action-area {
        display: flex;
        flex-direction: row;
        color: white;
        font-size: 14pt;
        height: 100%;
        justify-content: flex-end;
        align-items: center;
        flex-basis: 20%;
        max-width: 150px;
    }

    .song-badge-info {
        display: flex;
        flex-direction: column;
        margin: 10px;
        overflow: hidden;
    }

    .song-badge-image {
        max-width: 48px;
        height: 48px;
        object-fit: contain;
    }

    .player-song-name {
        color: white;
        font-size: 14pt;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .player-artist-name {
        color: rgba(255,255,255,0.5);
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .player-controls {
        display: flex;
        justify-content: center;
        align-items: baseline;
    }

    .player-progress {
        position: relative;
        height: 10px;
        flex-grow: 1;
    }

    .progress-bar {
        position: absolute;
        left: 0;
        height: 4px;
        border-radius: 5px !important;
    }

    .progress-background {
        right: 0;
        width: 100%;
        background-color: transparent;
    }

    .progress-foreground {
        width: 0%;
        background-color: white;
    }

    .player-controls-area {
        height: 100%;
        flex-grow: 1;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-content: center;
        align-items: center;
    }

    .player-background {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        background-size: cover;
        background-position: center;
        filter: blur(5px);
        overflow: hidden;
        opacity: 0.3;
        z-index: 1;
    }


    .play-controls-container {
        display: flex;
        justify-content: space-between;
    }

    .player-control {
        color: white;
        font-size: 36px;
        cursor: pointer;
    }

    .player-control.disabled {
        color: rgba(255,255,255,0.2);
    }

    .player-control-large {
    }

    .player-action-values {
        margin-right: 5px;
        text-align: right;
    }

    .player-time-area {
        display: flex;
        justify-content: space-between;
        color: white;
    }

    .player-progress-row {
        display: flex;
        flex-direction: column;
    }

    .selected-track {
        background-color: rgba(255, 255, 255, 0.1);
    }

    #player-message {
        display: none;
    }

    .player-time-field {
        min-width: 50px;
        text-align: center;
    }

    #player-tip-button {
        margin-right: 10px;
        font-size: 14pt;
    }

    .no_selection {
        -webkit-user-select: none; /* webkit (safari, chrome) browsers */
        -moz-user-select: none; /* mozilla browsers */
        -khtml-user-select: none; /* webkit (konqueror) browsers */
        -ms-user-select: none; /* IE10+ */
    }

    .progress-thumb {
        position: absolute;
        border-radius: 50%;
        background-color: black;
        width: 16px;
        height: 16px;
        top: -6px;
        left: -8px;
        transition: none;
    }

    #shuffle.button-highlight {
      color: black;
      text-shadow: 0px 0px 10px #fcc017;
    }

    .queue-size {
        border-radius: 12px;
        border: 2px solid white;
        background-color: #e4aa17;
        color: white;
        font-weight: bold;
        font-size: 0.5em;
        min-width: 25px;
        text-align: center;
    }

    .play-queue-open {
        background-color: white;
        color: #333;
    }

    #shuffle {
      padding: 5px;
      color: #777;
    }

</style>
<div id="player-section" class="fixed-footer player show-on-play">
    <div class="player-foreground no_selection" style="background: white;">
        <img id="player-badge-image" src="/images/default-profile.png" class="song-badge-image big-screen-only">
        <div class="song-badge-info">
            <div id=player-title-area  class="flex-row middle clickable title-link">
                <div id="player-title" style="color: black" class="player-song-name mr10">Song title which styupidly long that will cause some sort of snafu</div>
            </div>
            <div id="player-artist" style="color: black" class="player-artist-name clickable">Artist name which styupidly long that will cause some sort of snafu</div>
        </div>

        <i id="player-play-button" class="fa fa-play btn btn-plain player-control"
           onclick="audioPlayer.togglePlayState()"
           style="margin-right: 5px; color: black"
           aria-hidden="true"></i>
        <i class="fa fa-pause fa-3x" id="player-pause-button" onclick="audioPlayer.togglePlayState()" src="/images/player/pause.png"
             style="padding-right: 5px; margin-right: 4px; color: black"
             class="player-control"></i>

        <div id=player-progress style="background-color: black" class="player-progress mr5 big-screen-only">
            <div class="progress-bar progress-background"></div>
            <div id="player-progress-div" class="progress-bar progress-foreground" style="background-color: grey">
            </div>
            <div class="spread mt5">
                <div id="player-time-played" style="color: black" class="player-time-field big-screen-only">00:00</div>
                <div id="player-time-left" style="color: black" class="player-time-field">00:00</div>
            </div>
            <div id=progress-thumb class="progress-thumb draggable ui-widget-content"></div>
        </div>

        <i id="player-next-button" class="fa fa-lg fa-step-forward btn btn-plain player-control"
           onclick="audioPlayer.skipTrack()"
           style="color: grey"
           aria-hidden="true"></i>

        <div id="player-tip-button"
             title="Send a tip"
             class="clickable text-large mr10"
             context-type="Release"
             recipient="">
            <i class="fa fa-2x fa-sign-language btn btn-plain btn-sm"
               style="padding: 5px; color: black"
               aria-hidden="true"></i>
        </div>
        <div class="clickable text-large mr10">
            <i id=shuffle class="fa fa-2x fa-random btn-plain btn-sm toggle-shuffle"
               style="color: black" aria-hidden="true"></i>
        </div>

        <div title="Show or hide the playlist"
                class="clickable text-large mr10"
                style="position: relative">
            <i id="play-queue-trigger"
               class="fa fa-list-ul btn-plain btn-sm play-queue-trigger"
               style="padding: 5px; color:black"
               aria-hidden="true"></i>
            <i id="play-queue-count"
               class="queue-size"
               aria-hidden="true"
               style="position: absolute;bottom: -9px;right: -13px;">0</i>
        </div>
    </div>
    <div id="player-background" class="player-background" style="background-image: url('')"></div>
</div>

<script>
  var audioPlayer = {
    audioElement: null,

    nowPlayingLicenseAddress: null,
    nowPlayingArtistProfile: null,
    playbackId: 0,
    previousTime: 0,
    minMillisBetweenPlays: 2000,

    previouslySelectedTrack: null,

    progressThumb: null,
    progressArea: null,
    progressForeground: null,

    currentPlaylist: [],
    currentIdx: -1,
    shuffle: false,
    playlistListener: null,

    playItemById: function (licenseAddress, callback) {
      console.log("Checking eligibility for " + licenseAddress);
      $.post("/user/canPlay", {address: licenseAddress}, function(eligibility) {
        if (eligibility.success) {
          console.log("Getting details for " + licenseAddress);
          $.get( "/json-api/track/" + licenseAddress, function( data ) {
            var result = audioPlayer.playItem(null,
              data.audioUrl,
              data.title,
              data.artistName,
              data.image,
              data.playCount,
              data.tipCount,
              data.artistProfileAddress,
              data.address
            )
            if (callback) callback(null, result);
            if (eligibility.message) parent.showMessage(eligibility.message, "success", 5000);
          })
        }
        else {
          parent.showMessage(eligibility.message, "warning", 5000);
          if (callback) callback(new Error("Cannot play track"),  false);
        }
      })
    },

    queueTrack: function(licenseAddress, startIfPaused) {
      var newLength = audioPlayer.currentPlaylist.push(licenseAddress);
      audioPlayer._playlistChanged();

      // auto play this new track if the player is paused
      if (!audioPlayer.isPlaying() && (startIfPaused || newLength === 1)) {
        audioPlayer.jumpToIndex(newLength-1);
      }
    },

    removePlaylistItem: function(idx) {
      if (idx >= 0 && idx < audioPlayer.currentPlaylist.length && idx != audioPlayer.currentIdx) {
        var beforeCurrent = idx < audioPlayer.currentIdx;
        audioPlayer.currentPlaylist.splice(idx, 1);
        audioPlayer._playlistChanged();
        if (beforeCurrent) {
          audioPlayer.currentIdx--;
          audioPlayer._selectedItemChanged()
        }
      }
    },

    clearPlaylist: function() {
      if (audioPlayer.currentPlaylist.length > audioPlayer.currentIdx) {
        audioPlayer.currentPlaylist = [audioPlayer.currentPlaylist[audioPlayer.currentIdx]];
        audioPlayer.currentIdx = 0;
        audioPlayer._playlistChanged();
        audioPlayer._selectedItemChanged();
      }
    },

    playList: function(licenseIds) {
      if (licenseIds) {
        audioPlayer.currentPlaylist = licenseIds.slice();
        audioPlayer._playlistChanged();
        if (audioPlayer.shuffle) {
          audioPlayer.playNextItem();
        }
        else {
          audioPlayer.jumpToIndex(0);
        }
      }
    },

    skipTrack: function() {
      audioPlayer.playNextItem();
    },

    jumpToIndex: function(idx) {
      if (idx >= 0 && idx < audioPlayer.currentPlaylist.length) {
        console.log("Jumping to index: " + idx);
        audioPlayer.playItemById(audioPlayer.currentPlaylist[idx], function(err, played) {
          if (!err && played) {
            audioPlayer.currentIdx = idx;
            audioPlayer._selectedItemChanged();
          }
          else {
            console.log("Jumping to index: aborted: cannot play track now: " + idx + ": " + err);
          }
        });
      }
      else {
        console.log("Not kumping to index: index out of range: " + idx);
      }
    },

    setShuffle: function(newValue) {
      audioPlayer.shuffle = newValue;
      $("#shuffle").toggleClass('button-highlight', audioPlayer.shuffle);
      audioPlayer._shuffleStateChanged();
    },

    toggleShuffle: function() {
      audioPlayer.setShuffle(!audioPlayer.shuffle)
    },

    playNextItem: function() {
      var nextIdx = audioPlayer.shuffle
        ? Math.floor(Math.random() * audioPlayer.currentPlaylist.length)
        : audioPlayer.currentIdx + 1;

      console.log("Playing next item at index: " + nextIdx);
      audioPlayer.jumpToIndex(nextIdx);
    },

    pause: function() {
      audioPlayer.audioElement.pause();
    },

    isPlaying: function() {
      return !audioPlayer.audioElement.paused;
    },

    setPlayQueueClosed: function() {
      $("#play-queue-trigger").toggleClass("play-queue-open", false);
    },

    _selectedItemChanged: function() {
      if (audioPlayer.playlistListener && audioPlayer.playlistListener.selectedItemChanged)
        audioPlayer.playlistListener.selectedItemChanged(audioPlayer.currentIdx);
      audioPlayer._updateNextButton();
    },

    _playlistChanged: function() {
      if (audioPlayer.playlistListener && audioPlayer.playlistListener.playlistChanged)
        audioPlayer.playlistListener.playlistChanged(audioPlayer.currentPlaylist.slice());
      audioPlayer._updateNextButton();
      audioPlayer._updateQueueCount();
    },

    _shuffleStateChanged: function() {
      if (audioPlayer.playlistListener && audioPlayer.playlistListener.shuffleStateChanged) {
        audioPlayer.playlistListener.shuffleStateChanged(audioPlayer.shuffle);
      }
      audioPlayer._updateNextButton();
    },

    _playStateChanged: function(playing) {
      if (audioPlayer.playlistListener && audioPlayer.playlistListener.playStateChanged) {
        audioPlayer.playlistListener.playStateChanged(playing);
      }
      audioPlayer._updateNextButton();
    },

    _updateNextButton: function() {
      var canGoNext = audioPlayer.shuffle
        ?  audioPlayer.currentPlaylist.length > 0
        : audioPlayer.currentIdx < audioPlayer.currentPlaylist.length-1;
      console.log("canGoNext: " + canGoNext);
      $("#player-next-button").toggleClass("disabled", !canGoNext);
    },

    _updateQueueCount: function() {
      let queueCount = $("#play-queue-count");
      queueCount.toggle(audioPlayer.currentPlaylist.length > 1);
      queueCount.text(audioPlayer.currentPlaylist.length);
    },

    playItem: function (e, url, title, artist, img, playCount, tipCount, artistProfileAddress, licenseAddress) {
      var now = new Date().getTime();
      if (now - audioPlayer.previousTime < audioPlayer.minMillisBetweenPlays) {
        audioPlayer.previousTime = now;
        console.log("Too fast!");
        return false;
      }
      audioPlayer.playbackId++;
      console.log("Current playbackId: " + audioPlayer.playbackId);
      var thisPlay = audioPlayer.playbackId;
      var messageArea = $("#player-message");
      messageArea.show();
      messageArea.text("musicoin.org is sending 1 coin to '" + title + "'...");
      window.setTimeout(function() {
        if (thisPlay == audioPlayer.playbackId) {
          messageArea.text("musicoin.org sent 1 coin to '" + title + "'");
        }
      }, 20000);
      window.setTimeout(function() {
        if (thisPlay == audioPlayer.playbackId) {
          messageArea.hide();
        }
      }, 22000);

      audioPlayer.previousTime = now;
      audioPlayer.nowPlayingLicenseAddress = licenseAddress;
      audioPlayer.nowPlayingArtistProfile = artistProfileAddress;
      if (e) {
        if (audioPlayer.previouslySelectedTrack) audioPlayer.previouslySelectedTrack.classList.remove("selected-track")
        audioPlayer.previouslySelectedTrack = e;
        e.classList.add("selected-track");
      }
      $(".show-on-play", window.parent.document).css("display", "flex");
      $(".show-on-play").css("display", "flex");
      $("#player-title")[0].innerHTML = title;
      $("#player-artist")[0].innerHTML = artist;
      $("#player")[0].src = url + "?" + new Date().getTime();
      $("#player-background")[0].style.backgroundImage = "url('" + img + "')";
      $("#player-badge-image")[0].src = img;
//      $("#player-plays")[0].innerHTML = playCount;
//      $("#player-tips")[0].innerHTML = tipCount;

      // update the tip button with the new address and reset the icon
//      var tipButton = $("#player-tip-button");
//      tipButton.attr("recipient", licenseAddress);
//      tipButton.html('<i class="fa fa-heart-o message-tip" aria-hidden="true"></i>');

      var heartButton = $("#player-tip-button");
      heartButton.attr("recipient", licenseAddress);

      audioPlayer.audioElement.play();
      audioPlayer.resetProgressNow();
      return true;
    },

    initialize: function () {
      if (!audioPlayer.audioElement) {
        audioPlayer.audioElement = $('#player')[0];
        audioPlayer.audioElement.style.display = "block";
        audioPlayer.progressThumb = $("#progress-thumb");
        audioPlayer.progressArea = $("#player-progress");
        audioPlayer.progressForeground = $("#player-progress-div");
        audioPlayer.audioElement.addEventListener('error', function (e) {
          if (audioPlayer.nowPlayingLicenseAddress == null) return;

          $("#player-message").text("Playback failed!");
          console.log("Old playbackId: " + audioPlayer.playbackId);
          audioPlayer.playbackId++;
          console.log("New playbackId: " + audioPlayer.playbackId);
          $.post('/error-report', {
            licenseAddress: audioPlayer.nowPlayingLicenseAddress,
            errorContext: audioPlayer.audioElement.src,
            errorCode: e.target.error.code
          }, function(data) {
            if (data.success) {
              console.log("Reported error to Musicoin service successfully");
            }
            else {
              console.log("Failed to report error to Musicoin service: " + JSON.stringify(data));
            }
          });
          switch (e.target.error.code) {
            case e.target.error.MEDIA_ERR_ABORTED:
//              alert('You aborted the video playback.');
              break;
            case e.target.error.MEDIA_ERR_NETWORK:
              alert('A network error caused the audio download to fail.');
              break;
            case e.target.error.MEDIA_ERR_DECODE:
              alert('The audio playback was aborted due to a corruption problem or because the video used features your browser did not support.');
              break;
            case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
              alert('The video audio not be loaded, either because the server or network failed or because the format is not supported.');
              break;
            default:
              alert('An unknown error occurred.');
              break;
          }
        });

        audioPlayer.audioElement.addEventListener('timeupdate', function () {
          if (!isNaN(audioPlayer.audioElement.currentTime) && !isNaN(audioPlayer.audioElement.duration)) {
            $("#player-time-played")[0].innerText = audioPlayer.formatTime(audioPlayer.audioElement.currentTime);
            $("#player-time-left")[0].innerText = audioPlayer.formatTime(audioPlayer.audioElement.duration);

            // tell the progress bar to get to the end at the time the track will end
            if (audioPlayer.audioElement.paused) {
              audioPlayer.syncProgressNow();
              return;
            }

            var secondsLeft = audioPlayer.audioElement.duration - audioPlayer.audioElement.currentTime;
            audioPlayer.progressForeground.css('transition', 'width ' + parseInt(secondsLeft) + 's linear');
            audioPlayer.progressForeground.css('width', audioPlayer.progressArea.width());

            if (!audioPlayer.seeking) {
              audioPlayer.progressThumb.css('transition', 'left ' + parseInt(secondsLeft) + 's linear');
              audioPlayer.progressThumb.css('left', audioPlayer.progressArea.width() - 8);
            }
          }
        });

        audioPlayer.audioElement.addEventListener('ended', function () {
          audioPlayer.nowPlayingLicenseAddress = null;
          audioPlayer.audioElement.src = null;
          audioPlayer.playNextItem();
        })

        audioPlayer.audioElement.addEventListener('play', function () {
          audioPlayer.syncProgressNow();
          $("#player-play-button").hide();
          $("#player-pause-button").show();
          audioPlayer._playStateChanged(true);
          $('.music-player-container').toggleClass('is-playing');
        })

        audioPlayer.audioElement.addEventListener('pause', function () {
          audioPlayer.syncProgressNow();
          $("#player-play-button").show();
          $("#player-pause-button").hide();
          $('.music-player-container').toggleClass('is-playing');
          audioPlayer._playStateChanged(false);
        })

        audioPlayer.audioElement.addEventListener('canplay', function () {
          audioPlayer.syncProgressNow();
        })

        $("#player-artist").on('click', function() {
          if (audioPlayer.nowPlayingArtistProfile)
            parent.document.getElementById("mainFrame").src = "/artist/" + audioPlayer.nowPlayingArtistProfile;
        })

        $(".title-link").on('click', function() {
          if (audioPlayer.nowPlayingLicenseAddress)
            parent.document.getElementById("mainFrame").src = "/track/" + audioPlayer.nowPlayingLicenseAddress;
        })

        $(".toggle-shuffle").on('click', function() {
          audioPlayer.toggleShuffle();
        })

        $(".play-queue-trigger").on('click', function() {
          var playQueue = parent.document.getElementById("mainFrame").contentWindow.playQueue;
          var wasVisible = playQueue.isVisible();
          if (playQueue) {
            playQueue.toggle();
          }
          $(this).toggleClass("play-queue-open", !wasVisible);
        })

      }
      return audioPlayer.audioElement;
    },

    resetProgressNow: function() {
      audioPlayer.progressThumb.css('left', -8);
      audioPlayer.progressForeground.css('width', 0);
      audioPlayer.progressThumb.css('transition', 'none');
      audioPlayer.progressForeground.css('transition', 'none');
    },

    syncProgressNow: function() {
      var progress_fraction = audioPlayer.audioElement.currentTime / audioPlayer.audioElement.duration;
      audioPlayer.progressThumb.css('left', progress_fraction * audioPlayer.progressArea.width() - 8);
      audioPlayer.progressForeground.css('width', progress_fraction * audioPlayer.progressArea.width());

      audioPlayer.progressThumb.css('transition', 'none');
      audioPlayer.progressForeground.css('transition', 'none');
    },

    formatTime: function (seconds) {
      if (isNaN(seconds)) return "";
      var output = new Date(seconds * 1000).toISOString().substr(11, 8);
      if (output.startsWith("00:")) return output.substr(3);
      return output;
    },

    togglePlayState: function () {
      if (audioPlayer.audioElement.paused) {
        if (audioPlayer.audioElement.readyState > 0) {
          audioPlayer.audioElement.play();
        }
      }
      else {
        audioPlayer.audioElement.pause();
      }
    }
  }

  $(document).ready(function () {
    audioPlayer.initialize();

    audioPlayer.progressThumb.draggable({ axis: "x", containment: "#player-progress" });
    audioPlayer.progressThumb.draggable({
      start: function() {
        audioPlayer.seeking = true;
        audioPlayer.progressThumb.css('transition', 'none');
      },
      drag: function() {
      },
      stop: function() {
        audioPlayer.seeking = false;
        var position = parseInt(audioPlayer.progressThumb.css('left'));
        var max = audioPlayer.progressArea.width();
        var newValue = (position / max) * audioPlayer.audioElement.duration;
        if (!isNaN(newValue)) {
          audioPlayer.audioElement.currentTime = newValue;
          audioPlayer.syncProgressNow();
        }
      }
    });

    $("#player-tip-button").on('click', function() {
      var _tipModule = parent.document.getElementById("mainFrame").contentWindow.tipModule;
      _tipModule.accumulateTips($(this));
    })
  });
</script>

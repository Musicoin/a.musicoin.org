<div id="play-queue-container" class="play-queue">
    <div class="track-image-container">
        <div class="large-track-image mb10 selected-track-image"
             style="background-image: url('/images/default-track.jpg')">
        </div>
    </div>

    <div class="track-detail-area">
        <div class="selected-artist-image clickable" style="background-image: url('/images/default-profile.png')"></div>
        <div class="title-and-artist">
            <span class="crop-text track-title selected-track-title clickable">This is the track I'm playing with a rellay long name</span>
            <span class="crop-text text-muted">
                <span class="selected-artist-name clickable">Some artist</span>
                <i class="verified" title="verified user"></i>
            </span>
        </div>
    </div>

    <div class="flex-column queue-section">
        <div class="up-next-section">
            <div class="up-next-label">Up Next</div>
            <i class="fa fa-random ml30 text-muted clickable shuffle" aria-hidden="true"></i>
        </div>

        <div class="play-queue-table-container">
            <ul class="play-queue-table">
            </ul>
        </div>
    </div>

    <ul class="dummy" style="display: none">
        <li id="track-item-template">
            <div class="queue-item-action action-play playlist-item">
                <i class="fa fa-play" aria-hidden="true"></i>
                <i class="fa fa-pause" aria-hidden="true"></i>
            </div>
            <div class="crop-text track-title-cell">
                <span class="track-title">Some track</span>
                <div class="track-artist">Some artist </div>
            </div>
            <div class="queue-item-action action-delete remove-playlist-item"><i class="fa fa-trash-o" aria-hidden="true"></i></div>
        </li>
    </ul>
</div>

<script>
  var playQueue = {
    audioPlayer: null,
    currentItems: [],
    ui: {
      container: null,
      selectedArtistImage: null,
      selectedArtistName: null,
      selectedTrackTitle: null,
      selectedTrackImage: null,
      selectedArtistVerified: null,
      shuffle: null,
      queueSection: null
    },

    initialize: function (audioPlayer) {
      playQueue.audioPlayer = audioPlayer;

      playQueue.ui.container = $("#play-queue-container");

      playQueue.ui.selectedArtistImage = playQueue.ui.container.find(".selected-artist-image");
      playQueue.ui.selectedArtistName = playQueue.ui.container.find(".selected-artist-name");
      playQueue.ui.selectedTrackTitle = playQueue.ui.container.find(".selected-track-title");
      playQueue.ui.selectedTrackImage = playQueue.ui.container.find(".selected-track-image");
      playQueue.ui.selectedArtistVerified = playQueue.ui.container.find(".verified");
      playQueue.ui.shuffle = playQueue.ui.container.find(".shuffle");
      playQueue.ui.queueSection = playQueue.ui.container.find(".queue-section");

      playQueue.ui.trackItemTemplate = playQueue.ui.container.find("#track-item-template");
      playQueue.ui.playQueueTable = playQueue.ui.container.find(".play-queue-table");

      playQueue.ui.shuffle.on('click', function() {
        audioPlayer.toggleShuffle();
      })

      audioPlayer.playlistListener = {
        playlistChanged: playQueue.playlistChanged,
        selectedItemChanged: playQueue.setSelectedTrack,
        shuffleStateChanged: playQueue.shuffleChanged,
        playStateChanged: playQueue.playStateChanged,
      };

      function goToArtist() {
        var current = playQueue.currentItems[playQueue.audioPlayer.currentIdx];
        if (current) {
          window.location = "/artist/" + current.artistProfileAddress;
        }
      }

      playQueue.ui.selectedArtistImage.on('click', goToArtist);
      playQueue.ui.selectedArtistName.on('click', goToArtist);
      playQueue.ui.selectedTrackTitle.on('click', function() {
        var current = playQueue.currentItems[playQueue.audioPlayer.currentIdx];
        window.location = "/track/" + current.address;
      });

      playQueue.ui.container.find(".clear-playlist").on('click', function () {
        playQueue.audioPlayer.clearPlaylist();
      });

      playQueue.playlistChanged(audioPlayer.currentPlaylist.slice());
      playQueue.setSelectedTrack(audioPlayer.currentIdx);
      playQueue.shuffleChanged();
      audioPlayer.setPlayQueueClosed();
    },

    setSelectedTrack: function(idx) {
      console.log("Setting selected track index: " + idx);
      var table = playQueue.ui.playQueueTable;
      table.find("li.active").removeClass("active");
      playQueue.findTrackRowByIdx(idx).addClass("active");

      // when a new list is loaded and we are still fetching details, we might not be able
      // to set the selected track.
      var current = playQueue.currentItems[idx];
      if (current) {
        playQueue.ui.selectedArtistImage.css('background-image', 'url("' + current.artist.image + '")');
        playQueue.ui.selectedTrackImage.css('background-image', 'url("' + current.image + '")');
        playQueue.ui.selectedArtistName.text(current.artistName);
        playQueue.ui.selectedTrackTitle.text(current.title);
        playQueue.ui.selectedArtistVerified.toggle(current.artist.verified);
      }
    },

    toggle: function() {
      var modal = $('#play-queue-modal');
      if (modal.is(":visible")) {
        modal.hide();
      }
      else {
        modal.show();
      }
    },

    isVisible: function() {
      var modal = $('#play-queue-modal');
      return modal.is(":visible");
    },

    shuffleChanged: function() {
      playQueue.ui.shuffle.toggleClass("button-highlight", playQueue.audioPlayer.shuffle);
    },

    playStateChanged: function(playing) {
      playQueue.ui.container.toggleClass("playing", playing);
    },

    playlistChanged: function(newPlaylist) {
      if (newPlaylist.length === 0) {
        playQueue.load([]);
      }
      else {
        $.get("/json-api/tracks/details", {addresses: newPlaylist}, function(result){
          playQueue.load(result);
          playQueue.setSelectedTrack(playQueue.audioPlayer.currentIdx);
        })
      }
    },

    load: function(playlist) {
      console.log("Loading play queue");
      var template = playQueue.ui.trackItemTemplate;
      var table = playQueue.ui.playQueueTable;
      table.empty();
      var rowIdx = 0;

      playQueue.currentItems = playlist.slice();
      $.each(playlist, function(index, value){
        var row = template.clone();
        row.removeAttr("id");
        row.find(".track-title").text(value.title);
        row.find(".track-artist").text(value.artistName);
        row.find(".playlist-item").attr("licenseAddress", value.address);
        row.find(".playlist-item").attr("idx", rowIdx++);
        row.appendTo(table);
      })
      playQueue.ui.queueSection.toggle(playQueue.currentItems.length > 1);
    },

    findTrackRowByAddress: function(licenseAddress) {
      var table = playQueue.ui.playQueueTable;
      return table.find("td[licenseAddress='" + licenseAddress + "']").closest("tr");
    },

    findTrackRowByIdx: function(idx) {
      var table = playQueue.ui.playQueueTable;
      return table.find("li:nth-child(" + (idx+1) + ")");
    }
  }

  $(document).ready(function () {
    if (parent.document) {
      var playerFrame = parent.document.getElementById("playerFrame");
      var _audioPlayer = playerFrame.contentWindow.audioPlayer;
      if (_audioPlayer) {
        playQueue.initialize(_audioPlayer);
      }

      $(document).on('click', '.remove-playlist-item', function() {
        var idx = parseInt($(this).closest('li').find('.playlist-item').attr("idx"));
        playQueue.audioPlayer.removePlaylistItem(idx);
      })
    }
  });
</script>
